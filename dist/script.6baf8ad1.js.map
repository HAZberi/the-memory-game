{"version":3,"sources":["src/script.js"],"names":["container","document","querySelector","headerDisplay","message","stripe","buttons","querySelectorAll","movesBtn","header","nav","images","covers","cards","gameLevels","imagePaths","imgUrls","gameLevel","openedCards","moves","addEventListener","e","stopPropagation","target","classList","contains","card","image","closest","updateDisplay","style","display","push","displayMatchResult","id","displayLevels","selectLevels","reset","textContent","modeHandeller","arr","length","isMatch","src","forEach","el","splice","checkAllMatches","winningText","guessRate","console","log","toFixed","backgroundColor","color","unopenedImgs","filter","d1","d2","cardsCount","mode","cardsCreation","btn","remove","add","shuffleArray","i","j","Math","floor","random","temp","resetImgs","urls","url","alert","imgArr","boxesInARow","width","numBoxes","cssClass","_","cover","stickyNav","IntersectionObserver","entries","entry","isIntersecting","root","threshold","observe","innerHTML","html","insertAdjacentHTML","populatePaths","totalUrls","path","init"],"mappings":"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","file":"script.6baf8ad1.js","sourceRoot":"..","sourcesContent":["\"use strict\";\r\n\r\n//DOM Selection - Fixed DOM\r\nconst container = document.querySelector(\"#cards-container\");\r\nconst headerDisplay = document.querySelector(\"h1\");\r\nconst message = document.querySelector(\"#message\");\r\nconst stripe = document.querySelector(\".stripe\");\r\nconst buttons = document.querySelectorAll(\"button\");\r\nconst movesBtn = document.querySelector(\".moves\");\r\nconst header = document.querySelector(\"header\");\r\nconst nav = document.querySelector(\".header\");\r\n\r\n//Dynamic DOM\r\nlet images = document.querySelectorAll(\".image\");\r\nlet covers = document.querySelectorAll(\".cover\");\r\nlet cards = document.querySelectorAll(\".card\");\r\n\r\n//Global Setters\r\nconst gameLevels = [12, 20, 32, 48, 64];\r\nconst imagePaths = 38;\r\nlet imgUrls = [];\r\nlet gameLevel = gameLevels[0];\r\nlet openedCards = [];\r\nlet moves = 0;\r\n\r\n//Event Listeners\r\ncontainer.addEventListener(\"click\", (e) => {\r\n  e.stopPropagation();\r\n  if (!e.target.classList.contains(\"cover\")) return;\r\n  const card = e.target.closest(\".card\");\r\n  const image = card.querySelector(\".image\");\r\n  openedCards = updateDisplay(openedCards);\r\n  image.style.display = \"block\";\r\n  e.target.style.display = \"none\";\r\n  openedCards.push(image);\r\n  displayMatchResult(openedCards);\r\n});\r\n\r\nstripe.addEventListener(\"click\", function (e) {\r\n  e.stopPropagation();\r\n  if (e.target.id === \"shuffle\")\r\n    displayLevels(selectLevels(imgUrls, gameLevel));\r\n  if (e.target.id === \"reset\") reset();\r\n  if (e.target.textContent === \"Easy\") modeHandeller(gameLevels[0], e.target);\r\n  if (e.target.textContent === \"Medium\") modeHandeller(gameLevels[1], e.target);\r\n  if (e.target.textContent === \"Hard\") modeHandeller(gameLevels[2], e.target);\r\n  if (e.target.textContent === \"Ultra\") modeHandeller(gameLevels[3], e.target);\r\n  if (e.target.textContent === \"Legend\") modeHandeller(gameLevels[4], e.target);\r\n});\r\n\r\n//Logic + Helpers\r\n\r\nconst updateDisplay = function (arr) {\r\n  if (!(arr.length === 2)) return arr;\r\n  if (isMatch(arr[0].src, arr[1].src)) {\r\n  } else {\r\n    arr.forEach((el) => {\r\n      el.style.display = \"none\";\r\n      el.closest(\".card\").querySelector(\".cover\").style.display = \"block\";\r\n    });\r\n  }\r\n  arr.splice(0, 2);\r\n  return arr;\r\n};\r\n\r\nconst displayMatchResult = function (arr) {\r\n  if (!(arr.length === 2)) return;\r\n  moves++;\r\n  movesBtn.textContent = `Moves: ${moves}`;\r\n  if (isMatch(arr[0].src, arr[1].src)) {\r\n    message.textContent = \"Shabbashhh 👏\";\r\n    if (!checkAllMatches()) return;\r\n    winningText();\r\n  } else {\r\n    message.textContent = \"Beta Tum Sai Na Ho Paye Ga 😏😏\";\r\n  }\r\n};\r\n\r\nconst winningText = function () {\r\n  const guessRate = (gameLevel / 2 / moves) * 100;\r\n  console.log(\"check score\");\r\n  if (moves === gameLevel / 2) {\r\n    headerDisplay.textContent = `You Nailed it! Your Guess Rate is ${+guessRate.toFixed(\r\n      2\r\n    )}%`;\r\n    headerDisplay.style.backgroundColor = \"limegreen\";\r\n    headerDisplay.style.color = \"whitesmoke\";\r\n  }\r\n  if (moves > gameLevel / 2 && moves <= 2 * (gameLevel / 2)) {\r\n    headerDisplay.textContent = `Great Work! Your Guess Rate is ${+guessRate.toFixed(\r\n      2\r\n    )}%`;\r\n    headerDisplay.style.backgroundColor = \"lime\";\r\n    headerDisplay.style.color = \"steelblue\";\r\n  }\r\n  if (moves > 2 * (gameLevel / 2) && moves <= 3 * (gameLevel / 2)) {\r\n    headerDisplay.textContent = `That's Okay, Keep it up! Your Guess Rate is ${+guessRate.toFixed(\r\n      2\r\n    )}%`;\r\n    headerDisplay.style.backgroundColor = \"gold\";\r\n    headerDisplay.style.color = \"steelblue\";\r\n  }\r\n  if (moves > 3 * (gameLevel / 2)) {\r\n    headerDisplay.textContent = `Poor Work, Try Again! Your Guess Rate is ${+guessRate.toFixed(\r\n      2\r\n    )}%`;\r\n    headerDisplay.style.backgroundColor = \"orangered\";\r\n    headerDisplay.style.color = \"whitesmoke\";\r\n  }\r\n};\r\n\r\nconst checkAllMatches = function () {\r\n  const unopenedImgs = [...images].filter(\r\n    (image) => image.style.display === \"none\"\r\n  );\r\n  if (unopenedImgs.length === 0) return true;\r\n  return false;\r\n};\r\n\r\nconst isMatch = function (d1, d2) {\r\n  if (d1 === d2) return true;\r\n  return false;\r\n};\r\n\r\nconst modeHandeller = function (cardsCount, mode) {\r\n  gameLevel = cardsCount;\r\n  cardsCreation(gameLevel);\r\n  displayLevels(selectLevels(imgUrls, gameLevel));\r\n  buttons.forEach((btn) => btn.classList.remove(\"selected\"));\r\n  mode.classList.add(\"selected\");\r\n};\r\n\r\nconst shuffleArray = function (arr) {\r\n  for (let i = arr.length - 1; i > 0; i--) {\r\n    let j = Math.floor(Math.random() * (i + 1));\r\n    let temp = arr[i];\r\n    arr[i] = arr[j];\r\n    arr[j] = temp;\r\n  }\r\n  return arr;\r\n};\r\n\r\nconst resetImgs = function (urls) {\r\n  //console.clear()\r\n  urls = shuffleArray(urls);\r\n  urls.forEach((url, i) => {\r\n    images[i].src = url;\r\n    //console.log(images[i]);\r\n  });\r\n};\r\n\r\nconst selectLevels = function (urls, cardsCount) {\r\n  if (cardsCount % 2 !== 0) return alert(\"Please Enter an Even Number\");\r\n  let imgArr = [];\r\n  urls.forEach((url, i) => {\r\n    if (cardsCount / 2 > i) {\r\n      imgArr.push(url);\r\n    }\r\n  });\r\n  imgArr = [...imgArr, ...imgArr];\r\n  return imgArr;\r\n};\r\n\r\nconst boxesInARow = function (urls, width, numBoxes) {\r\n  container.style.width = width + \"%\";\r\n  const cssClass = {\r\n    0: \"cards\",\r\n    3: \"cardsThree\",\r\n    4: \"cardsFour\",\r\n    5: \"cardsFive\",\r\n    8: \"cardsEight\",\r\n  };\r\n  urls.forEach((_, i) => {\r\n    cards[i].classList.remove(\r\n      cssClass[\"0\"],\r\n      cssClass[\"3\"],\r\n      cssClass[\"4\"],\r\n      cssClass[\"5\"],\r\n      cssClass[\"8\"]\r\n    );\r\n    cards[i].classList.add(cssClass[numBoxes]);\r\n  });\r\n};\r\n\r\nconst reset = function () {\r\n  images.forEach((image) => (image.style.display = \"none\"));\r\n  covers.forEach((cover) => (cover.style.display = \"block\"));\r\n  moves = 0;\r\n  message.textContent = \"Chalo Khelo 😋\";\r\n  movesBtn.textContent = `Moves: ${moves}`;\r\n  headerDisplay.textContent = \"Match Up\";\r\n  headerDisplay.style.backgroundColor = \"steelblue\";\r\n  headerDisplay.style.color = \"whitesmoke\";\r\n};\r\n\r\nconst displayLevels = function (urls) {\r\n  reset();\r\n  resetImgs(urls);\r\n  if (urls.length <= 12 && urls.length > 6) boxesInARow(urls, 75, 4);\r\n  if (urls.length <= 20 && urls.length > 12) boxesInARow(urls, 90, 5);\r\n  if (urls.length > 20) boxesInARow(urls, 95, 8);\r\n};\r\n\r\nconst stickyNav = function () {\r\n  const options = {\r\n    root: null,\r\n    threshold: 0,\r\n  };\r\n  const toggleNav = function (entries) {\r\n    entries.forEach((entry) => {\r\n      if (!entry.isIntersecting) {\r\n        nav.classList.add(\"sticky\");\r\n      } else {\r\n        nav.classList.remove(\"sticky\");\r\n      }\r\n    });\r\n  };\r\n  const headerObserver = new IntersectionObserver(toggleNav, options);\r\n  headerObserver.observe(header);\r\n};\r\n\r\nconst cardsCreation = function (cardsCount) {\r\n  container.innerHTML = \"\";\r\n  cards = images = covers = null;\r\n  for (let i = 0; i < cardsCount; i++) {\r\n    let html = `\r\n    <div class=\"card\">\t\t\t\r\n      <div class=\"cover\"></div>\r\n      <img src=\"\" class='image' id= ${i + 1}>\r\n    </div>`;\r\n    container.insertAdjacentHTML(\"beforeend\", html);\r\n  }\r\n  cards = document.querySelectorAll(\".card\");\r\n  images = document.querySelectorAll(\".image\");\r\n  covers = document.querySelectorAll(\".cover\");\r\n};\r\n\r\nconst populatePaths = function (totalUrls) {\r\n  let arr = [];\r\n  for (let i = 0; i < totalUrls; i++) {\r\n    const path = `../img/img-${i + 1}.jpg`;\r\n    arr.push(path);\r\n  }\r\n  return arr;\r\n};\r\n\r\nconst init = function () {\r\n  imgUrls = shuffleArray(populatePaths(imagePaths));\r\n  cardsCreation(gameLevel);\r\n  displayLevels(selectLevels(imgUrls, gameLevel));\r\n  stickyNav();\r\n};\r\n\r\n//Game Initialization\r\n\r\ninit();\r\n"]}